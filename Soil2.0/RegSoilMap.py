import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go


def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏."""
    try:
        data = pd.read_excel(
            r'C:/Users/Stepan/PycharmProjects/Soils/Soil2.0/TestFactMap.xlsx',
            engine='openpyxl'
        )

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        data['LAT'] = data['LAT'].astype(str).str.replace(',', '.').astype(float)
        data['LONG'] = data['LONG'].astype(str).str.replace(',', '.').astype(float)

        return data

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None


def plot_factors_map(filtered_data, selected_factors, mode):
    """–°—Ç—Ä–æ–∏—Ç –∫–∞—Ä—Ç—É —Å —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏"""
    fig = go.Figure()

    if mode == "–°–∏–ª–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤":
        for factor in selected_factors:
            fig.add_trace(go.Scattermapbox(
                lat=filtered_data["LAT"],
                lon=filtered_data["LONG"],
                mode="markers",
                marker=dict(
                    size=8,
                    color=filtered_data[factor],
                    colorscale="viridis",
                    showscale=True,
                    colorbar=dict(title=factor)
                ),
                text=filtered_data["RUREG"],
                name=factor
            ))

    elif mode == "–°–∏–ª—å–Ω–µ–π—à–∏–π —Ñ–∞–∫—Ç–æ—Ä":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—å–Ω–µ–π—à–∏–π —Ñ–∞–∫—Ç–æ—Ä –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
        factor_columns = [col for col in filtered_data.columns if "–§–∞–∫—Ç–æ—Ä" in col]
        filtered_data["Max Factor"] = filtered_data[factor_columns].abs().idxmax(axis=1)
        filtered_data["Max Value"] = filtered_data[factor_columns].max(axis=1)

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
        factor_colors = {factor: px.colors.qualitative.Plotly[i % len(px.colors.qualitative.Plotly)]
                         for i, factor in enumerate(factor_columns)}

        for factor, color in factor_colors.items():
            subset = filtered_data[filtered_data["Max Factor"] == factor]
            fig.add_trace(go.Scattermapbox(
                lat=subset["LAT"],
                lon=subset["LONG"],
                mode="markers",
                marker=dict(
                    size=8,
                    color=color,
                    showscale=False
                ),
                text=subset["RUREG"] + f" ({factor})",
                name=factor
            ))

    fig.update_layout(
        mapbox=dict(
            style="open-street-map",
            zoom=5,
            center=dict(lat=filtered_data["LAT"].mean(), lon=filtered_data["LONG"].mean())
        ),
        margin=dict(r=0, t=0, l=0, b=0)
    )

    return fig


def main():
    st.title("üåç –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –ø–æ —Ä–∞–∑—Ä–µ–∑–∞–º")

    data = load_data()
    if data is None:
        return

    # üéØ **–§–∏–ª—å—Ç—Ä—ã**
    col1, col2 = st.columns(2)

    with col1:
        selected_regions = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã", data["RUREG"].unique(), default=data["RUREG"].unique())

    with col2:
        selected_horizon = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ HORNMB", data["HORNMB"].unique())

    # üîç **–§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ**
    filtered_data = data[
        (data["RUREG"].isin(selected_regions)) &
        (data["HORNMB"] == selected_horizon)
    ]

    if filtered_data.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
        return

    # üéõÔ∏è **–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è**
    mode = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", ["–°–∏–ª–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤", "–°–∏–ª—å–Ω–µ–π—à–∏–π —Ñ–∞–∫—Ç–æ—Ä"])

    # üéõÔ∏è **–í—ã–±–æ—Ä —Ñ–∞–∫—Ç–æ—Ä–æ–≤**
    factor_columns = [col for col in data.columns if "–§–∞–∫—Ç–æ—Ä" in col]
    selected_factors = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", factor_columns, default=[factor_columns[0]])

    # üåç **–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã**
    st.markdown("### –ö–∞—Ä—Ç–∞ —Å —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏")
    fig = plot_factors_map(filtered_data, selected_factors, mode)
    st.plotly_chart(fig, use_container_width=True)

    # üìä **–í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã**
    st.markdown("### –¢–∞–±–ª–∏—Ü–∞ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫")
    st.dataframe(filtered_data[["RUREG", "HORNMB"] + selected_factors])


if __name__ == "__main__":
    main()
