import streamlit as st
import pandas as pd
import numpy as np
import hashlib
from pathlib import Path
import matplotlib.pyplot as plt
from Main import DataPipeline, FactorAnalyzerProcessor  # –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
import seaborn as sns
import requests
import re
import json

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_user_input(user_input):
    with open("user_input.json", "w", encoding="utf-8") as f:
        json.dump(user_input, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_user_input():
    try:
        with open("user_input.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    except json.JSONDecodeError:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return {}


class RecommendationGenerator:
    def __init__(self, api_key='chad-396a38eb0ffc4d809b11543207ab3ab7moxdetmr'):
        self.api_key = api_key
        self.report_dir = Path("–û—Ç—á–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã")
    def process(self, factors_df):
        try:
            recommendation_prompts = []
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
            for index, row in factors_df.iterrows():
                prompt = (
                    f"–¢—ã –∞–≥—Ä–æ–Ω–æ–º-–ø—Ä–∞–∫—Ç–∏–∫ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è "
                    f"—Ñ–µ—Ä–º–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
                    f"–§–∞–∫—Ç–æ—Ä: ¬´{row['–ù–∞–∑–≤–∞–Ω–∏–µ_—Ñ–∞–∫—Ç–æ—Ä–∞']}¬ª\n"
                    f"–í–ª–∏—è–Ω–∏–µ: {row['–í–ª–∏—è–Ω–∏–µ']} (—à–∫–∞–ª–∞ 0-100)\n"
                    f"–í—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(parse_variables(row['–§–∞–∫—Ç–æ—Ä']))}\n\n"  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                    "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:\n"
                    "1. –ù–∞—á–Ω–∏ —Å—Ä–∞–∑—É —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —à–∞–≥–æ–≤ –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑\n"
                    "2. –£–∫–∞–∂–∏ 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫—É–ª—å—Ç—É—Ä/—É–¥–æ–±—Ä–µ–Ω–∏–π\n"
                    "3. –î–æ–±–∞–≤—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π)\n"
                    "4. –ü—Ä–µ–¥–ª–æ–∂–∏ –º–µ—Ç–æ–¥—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n"
                    "5. –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –ø–æ–ª–µ–≤–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ\n"
                    "–§–æ—Ä–º–∞—Ç:\n"
                    "1. {–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∞} | –í–ª–∏—è–Ω–∏–µ: {–∑–Ω–∞—á–µ–Ω–∏–µ}\n"
                    "- –î–µ–π—Å—Ç–≤–∏–µ 1: ...\n"
                    "- –î–µ–π—Å—Ç–≤–∏–µ 2: ...\n"
                    "- –ö–æ–Ω—Ç—Ä–æ–ª—å: –∑–∞–º–µ—Ä—è—Ç—å ... (–æ–ø—Ç–∏–º—É–º: X-Y –µ–¥–∏–Ω–∏—Ü)\n"
                    "- –ü—Ä–∏–º–µ—Ä—ã: –∫—É–ª—å—Ç—É—Ä—ã –ê, –ë; —É–¥–æ–±—Ä–µ–Ω–∏—è –í, –ì"
                )
                recommendation_prompts.append({"factor": row['–§–∞–∫—Ç–æ—Ä'], "prompt": prompt})
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
            factors_df['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'] = self._get_api_responses(recommendation_prompts)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if factors_df['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'].str.contains('–û—à–∏–±–∫–∞').any():
                st.warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

            return factors_df

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
            factors_df['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'] = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            return factors_df

    def _get_api_responses(self, prompts):
        responses = []
        for item in prompts:
            try:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                print(f"Sending request to API: {item['prompt'][:50]}...")

                response = requests.post(
                    url='https://ask.chadgpt.ru/api/public/gpt-4o',
                    json={"message": item["prompt"], "api_key": self.api_key},
                    timeout=20
                )

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                print(f"Response status: {response.status_code}")

                if response.status_code == 200:
                    resp_json = response.json()
                    if resp_json.get('is_success', False):
                        clean_response = resp_json['response'].split('```')[0].strip()
                        responses.append(clean_response)
                    else:
                        responses.append(f"API Error: {resp_json.get('message', 'Unknown error')}")
                else:
                    responses.append(f"HTTP Error {response.status_code}")

            except Exception as e:
                responses.append(f"Connection Error: {str(e)}")

        return responses

def parse_variables(factor_str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–∞ –≤–∏–¥–∞ 'F1 (var1, var2)'"""
    match = re.search(r'\((.*?)\)', factor_str)
    return match.group(1).split(', ') if match else []

@st.cache_data
def load_variable_descriptions():
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö """
    try:
        desc_df = pd.read_excel("–û—Ç—á–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã/naming_of_variables.xlsx")
        return desc_df[['–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö']].dropna()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {str(e)}")
        return pd.DataFrame(columns=['–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö'])

@st.cache_data
def load_factor_names():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    path = Path("–û—Ç—á–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã/soil_analysis_results.xlsx")
    if path.exists():
        try:
            names_df = pd.read_excel(path, sheet_name="–ù–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
            return dict(zip(
                [f"–§–∞–∫—Ç–æ—Ä {i+1}" for i in range(len(names_df))],
                names_df["–û—Ç–≤–µ—Ç"].fillna("–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è").tolist()
            ))
        except:
            return {}
    return {}

def get_file_hash(file):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à (MD5) —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    file.seek(0)
    return hashlib.md5(file.read()).hexdigest()


# üéØ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def load_factor_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏, –æ—Ü–µ–Ω–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
    factor_scores_path = Path("–û—Ç—á–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã/soil_analysis_results.xlsx")

    factor_names = {}
    factor_loadings = None
    factor_scores = None

    if factor_scores_path.exists():
        with pd.ExcelFile(factor_scores_path) as xls:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if "–§–∞–∫—Ç–æ—Ä–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏" in xls.sheet_names and "–§–∞–∫—Ç–æ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏" in xls.sheet_names:
                factor_loadings = pd.read_excel(xls, sheet_name="–§–∞–∫—Ç–æ—Ä–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏", index_col=0)
                factor_scores = pd.read_excel(xls, sheet_name="–§–∞–∫—Ç–æ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏", index_col=0)

            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            if "–ù–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤" in xls.sheet_names:
                names_df = pd.read_excel(xls, sheet_name="–ù–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
                factor_names = dict(zip(
                    [f"–§–∞–∫—Ç–æ—Ä {i + 1}" for i in range(len(names_df))],
                    names_df["–û—Ç–≤–µ—Ç"].tolist()
                ))

    return factor_loadings, factor_scores, factor_names

def main():
    st.set_page_config(page_title="Soil Analysis App", layout="wide")

    # üéØ **–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã**
    page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
        ["–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–ê–Ω–∞–ª–∏–∑ –ø–æ—á–≤—ã"]
    )

    if page == "–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        st.title("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—á–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏ —Ñ–ª–∞–≥–æ–≤ —ç—Ç–∞–ø–æ–≤
        if 'pipeline' not in st.session_state:
            st.session_state.pipeline = None
        if 'file_uploaded' not in st.session_state:
            st.session_state.file_uploaded = False
        if 'file_hash' not in st.session_state:
            st.session_state.file_hash = None

        # –§–ª–∞–≥–∏ –¥–ª—è —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if 'preprocessed' not in st.session_state:
            st.session_state.preprocessed = False
        if 'significance_done' not in st.session_state:
            st.session_state.significance_done = False
        if 'multicollinearity_done' not in st.session_state:
            st.session_state.multicollinearity_done = False
        if 'kmo_done' not in st.session_state:
            st.session_state.kmo_done = False
        if 'factor_analysis_done' not in st.session_state:
            st.session_state.factor_analysis_done = False
        if 'factor_scores_done' not in st.session_state:
            st.session_state.factor_scores_done = False
        if 'factor_names_done' not in st.session_state:
            st.session_state.factor_names_done = False

        temp_path = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        # –í –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:
        variable_descriptions = load_variable_descriptions()

        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö (Excel)", type=["xlsx"])

        if uploaded_file:
            current_file_hash = get_file_hash(uploaded_file)
            if st.session_state.file_hash is None or st.session_state.file_hash != current_file_hash:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
                temp_path = Path("temp_soil_data.xlsx")
                with open(temp_path, "wb") as f:
                    f.write(uploaded_file.getvalue())
                st.session_state.pipeline = DataPipeline(
                    input_file=str(temp_path),
                    output_file="soil_analysis_results.xlsx"
                )
                st.session_state.file_uploaded = True
                st.session_state.file_hash = current_file_hash
                # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è
                st.session_state.preprocessed = False
                st.session_state.significance_done = False
                st.session_state.multicollinearity_done = False
                st.session_state.kmo_done = False
                st.session_state.factor_analysis_done = False
                st.session_state.factor_scores_done = False
                st.session_state.factor_names_done = False
            else:
                st.write("–§–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø—ã 1-4.")

        if st.session_state.pipeline:
            pipeline = st.session_state.pipeline
            progress_bar = st.progress(0)
            status = st.empty()

            try:
                # –≠—Ç–∞–ø 1: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
                with st.expander("‚úÖ –≠—Ç–∞–ø 1: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", expanded=True):
                    if not st.session_state.preprocessed:
                        status.markdown("**–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...**")
                        pipeline.run_stage(1)
                        st.session_state.preprocessed = True
                        st.success("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        st.write(f"–°–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(pipeline.data.columns)}")
                        progress_bar.progress(12)
                    else:
                        st.write("–≠—Ç–∞–ø –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                        progress_bar.progress(12)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
                        st.dataframe(pipeline.data, height=600)  # height –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

                # –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                with st.expander("üìà –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"):
                    if not st.session_state.significance_done:
                        status.markdown("**–ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...**")
                        pipeline.run_stage(2)
                        st.session_state.significance_done = True
                        progress_bar.progress(25)
                    else:
                        st.write("–≠—Ç–∞–ø –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                        progress_bar.progress(25)

                    col1, col2 = st.columns(2)
                    with col1:
                        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                        if pipeline.artifacts['feature_importances']:
                            model_names = list(pipeline.artifacts['feature_importances'].keys())
                            selected_model = st.selectbox("–ú–æ–¥–µ–ª—å", model_names, index=0)

                            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
                            top_features = pipeline.artifacts['feature_importances'][selected_model].head()
                            if not variable_descriptions.empty:
                                top_features = top_features.merge(
                                    variable_descriptions,
                                    left_on='Feature',
                                    right_on='–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è',
                                    how='left'
                                ).drop('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è', axis=1).fillna('–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')

                            st.subheader("–¢–æ–ø-5 –∑–Ω–∞—á–∏–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                            st.dataframe(top_features)
                    with col2:
                        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
                        if (pipeline.significance_analyzer is not None and
                            hasattr(pipeline.significance_analyzer, 'results')):
                            models_df = pd.DataFrame(pipeline.significance_analyzer.results)
                            st.dataframe(models_df.sort_values('R2', ascending=False))
                        else:
                            st.warning("–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    fig, ax = plt.subplots(figsize=(10, 6))
                    sns.barplot(
                        data=pipeline.artifacts['feature_importances'][selected_model].head(10),
                        x="Importance",
                        y="Feature",
                        palette="viridis",
                        ax=ax
                    )
                    st.pyplot(fig)

                # –≠—Ç–∞–ø 3: –ú—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å
                with st.expander("üìâ –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏"):
                    if not st.session_state.multicollinearity_done:
                        status.markdown("**–û–±—Ä–∞–±–æ—Ç–∫–∞ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏...**")
                        pipeline.run_stage(3)
                        st.session_state.multicollinearity_done = True
                        progress_bar.progress(37)
                    else:
                        st.write("–≠—Ç–∞–ø –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                        progress_bar.progress(37)
                    col1, col2 = st.columns(2)
                    with col1:
                        st.subheader("–£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
                        removed_features = pipeline.artifacts['multicollinearity']['removed_features']

                        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                        if not variable_descriptions.empty:
                            removed_df = pd.DataFrame(removed_features, columns=['–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è'])
                            removed_df = removed_df.merge(
                                variable_descriptions,
                                on='–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è',
                                how='left'
                            ).fillna('–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                            st.dataframe(removed_df)
                        else:
                            st.write(removed_features)
                    with col2:
                        st.subheader("VIF –æ—Ç—á–µ—Ç")
                        vif_report = pipeline.artifacts['multicollinearity']['vif_report'].copy()

                        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≤ VIF –æ—Ç—á–µ—Ç
                        if not variable_descriptions.empty:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                            if 'Variable' in vif_report.columns:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫—É 'Variable' –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                                vif_report['Variable'] = vif_report['Variable'].astype(str).str.strip().str.lower()
                                variable_descriptions['–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è'] = variable_descriptions['–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è'].astype(
                                    str).str.strip().str.lower()

                                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ –∫–æ–ª–æ–Ω–∫–µ 'Variable'
                                vif_report = vif_report.merge(
                                    variable_descriptions,
                                    left_on='Variable',
                                    right_on='–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è',
                                    how='left'
                                ).drop('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è', axis=1).fillna('–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                            else:
                                # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ 'Variable' –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
                                vif_report = vif_report.reset_index()
                                vif_report['index'] = vif_report['index'].astype(str).str.strip().str.lower()
                                variable_descriptions['–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è'] = variable_descriptions['–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è'].astype(
                                    str).str.strip().str.lower()

                                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
                                vif_report = vif_report.merge(
                                    variable_descriptions,
                                    left_on='index',
                                    right_on='–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è',
                                    how='left'
                                ).drop('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è', axis=1).fillna('–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')

                                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å
                                vif_report = vif_report.set_index('index')
                                vif_report.index.name = None

                        st.dataframe(vif_report)

                # –≠—Ç–∞–ø 4: KMO –∞–Ω–∞–ª–∏–∑
                with st.expander("üîç –≠—Ç–∞–ø 4: KMO –∞–Ω–∞–ª–∏–∑"):
                    if not st.session_state.kmo_done:
                        status.markdown("**–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∫–∏...**")
                        pipeline.run_stage(4)
                        st.session_state.kmo_done = True
                        progress_bar.progress(50)
                    else:
                        st.write("–≠—Ç–∞–ø KMO –∞–Ω–∞–ª–∏–∑–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                        progress_bar.progress(50)

                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã KMO")
                    col1, col2 = st.columns(2)

                    with col1:
                        st.metric("–û–±—â–∏–π KMO", f"{pipeline.artifacts['kmo']['kmo_model']:.2f}")
                        st.write("–£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
                        st.write(pipeline.artifacts['kmo']['removed_features'])

                    with col2:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü
                        correlation_images = sorted(Path("–û—Ç—á–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã").glob("correlation_group_*.png"))

                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if 'current_corr_image' not in st.session_state:
                            st.session_state.current_corr_image = 0

                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                        cols = st.columns([1, 2, 1])
                        with cols[0]:
                            if st.button("‚Üê –ù–∞–∑–∞–¥"):
                                st.session_state.current_corr_image = max(0, st.session_state.current_corr_image - 1)
                        with cols[2]:
                            if st.button("–í–ø–µ—Ä–µ–¥ ‚Üí"):
                                st.session_state.current_corr_image = min(len(correlation_images) - 1,
                                                                          st.session_state.current_corr_image + 1)

                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        if correlation_images:
                            current_image = correlation_images[st.session_state.current_corr_image]
                            st.image(str(current_image))
                            st.caption(
                                f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç {st.session_state.current_corr_image + 1} –∏–∑ {len(correlation_images)})")
                        else:
                            st.warning("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ KMO-–∞–Ω–∞–ª–∏–∑–∞
                    if "factor_analysis_recommendations" not in st.session_state:
                        factor_analyzer = FactorAnalyzerProcessor()
                        recommendations = factor_analyzer.process(pipeline.data, pipeline.output_file, num_factors=None)
                        st.session_state.factor_analysis_recommendations = recommendations

                # üî• –≠—Ç–∞–ø 5: –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                with st.expander("üß© –≠—Ç–∞–ø 5: –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑"):
                    status.markdown("**–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...**")

                    # üî• –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ KMO-–∞–Ω–∞–ª–∏–∑–∞)
                    st.subheader("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∞–∫—Ç–æ—Ä–æ–≤")

                    recs = st.session_state.get("factor_analysis_recommendations", {})
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("–ö—Ä–∏—Ç–µ—Ä–∏–π –ö–∞–π–∑–µ—Ä–∞", recs.get('num_factors_kaiser', 'N/A'))
                    with col2:
                        st.metric("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", recs.get('num_factors_parallel', 'N/A'))
                    with col3:
                        st.metric("70% –¥–∏—Å–ø–µ—Ä—Å–∏–∏", recs.get('num_factors_variance', 'N/A'))

                    # üî• –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–≥—Ä–∞—Ñ–∏–∫–∏ —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ—Å–ª–µ KMO-–∞–Ω–∞–ª–∏–∑–∞)
                    st.subheader("üìâ –ì—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
                    col1, col2 = st.columns(2)
                    with col1:
                        if Path("–û—Ç—á–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã/scree_plot.png").exists():
                            st.image("–û—Ç—á–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã/scree_plot.png", caption="–ì—Ä–∞—Ñ–∏–∫ Scree Plot")
                        else:
                            st.warning("–ì—Ä–∞—Ñ–∏–∫ Scree Plot –Ω–µ –Ω–∞–π–¥–µ–Ω")

                    with col2:
                        if Path("–û—Ç—á–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã/explained_variance.png").exists():
                            st.image("–û—Ç—á–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã/explained_variance.png", caption="–û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è")
                        else:
                            st.warning("–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

                    # üî• –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (—Å –∫–Ω–æ–ø–∫–æ–π)
                    st.subheader("‚öôÔ∏è –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
                    num_factors = st.number_input(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤",
                        min_value=1,
                        max_value=30,
                        value=3,
                        key="num_factors_input"
                    )

                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
                    if st.button("üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑"):
                        try:
                            pipeline.factor_analyzer = FactorAnalyzerProcessor()
                            result = pipeline.factor_analyzer.process(
                                pipeline.data,
                                pipeline.output_file,
                                num_factors=num_factors
                            )

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                            if result and "loadings" in result:
                                pipeline.artifacts['factor_analysis'] = result  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                                st.session_state.factor_analysis_done = True
                                st.success("–§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

                                # üìä –í—ã–≤–æ–¥ —Å–æ–≤–æ–∫—É–ø–Ω–æ–π –æ–±—ä—è—Å–Ω–µ–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏
                                explained_variance = result.get("cumulative_variance", None)
                                if explained_variance is not None:
                                    st.metric("–°–æ–≤–æ–∫—É–ø–Ω–∞—è –æ–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è", f"{explained_variance:.2f}%")

                                # –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç—Ç–∞–ø—ã 6, 7 –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø
                                st.session_state.show_stage_6 = True
                                st.session_state.show_stage_7 = True
                                st.session_state.show_final_stage = True

                                progress_bar.progress(62)
                            else:
                                st.error("‚ö†Ô∏è –û—à–∏–±–∫–∞: –§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")

                        except Exception as e:
                            st.error(f"üö® –û—à–∏–±–∫–∞ —Ñ–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

                    elif st.session_state.factor_analysis_done:
                        st.success(
                            "–§–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–æ–≤–æ."
                        )

                # –≠—Ç–∞–ø 6: –§–∞–∫—Ç–æ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ (—Å–∫—Ä—ã—Ç, –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
                if st.session_state.get("show_stage_6", False):
                    with st.expander("üìê –≠—Ç–∞–ø 6: –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫"):
                        if 'factor_analysis' not in pipeline.artifacts:
                            st.error("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≠—Ç–∞–ø–∞ 6 —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–≠—Ç–∞–ø 5).")
                        else:
                            if not st.session_state.factor_scores_done:
                                status.markdown("**–†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫...**")
                                pipeline.run_stage(6)
                                st.session_state.factor_scores_done = True
                                progress_bar.progress(75)
                            else:
                                st.write("–≠—Ç–∞–ø —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                                progress_bar.progress(75)

                            st.subheader("–§–∞–∫—Ç–æ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏")
                            st.dataframe(pipeline.artifacts['factor_scores'].head())

                            # 3D –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 3 —Ñ–∞–∫—Ç–æ—Ä–∞
                            if len(pipeline.artifacts['factor_scores'].columns) >= 3:
                                fig = plt.figure(figsize=(10, 6))
                                ax = fig.add_subplot(111, projection='3d')
                                factors = pipeline.artifacts['factor_scores'].iloc[:, :3]
                                ax.scatter(factors.iloc[:, 0], factors.iloc[:, 1], factors.iloc[:, 2])
                                ax.set_xlabel(factors.columns[0])
                                ax.set_ylabel(factors.columns[1])
                                ax.set_zlabel(factors.columns[2])
                                st.pyplot(fig)

                # –≠—Ç–∞–ø 7: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π (—Å–∫—Ä—ã—Ç, –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
                if st.session_state.get("show_stage_7", False):
                    with st.expander("üìã –≠—Ç–∞–ø 7: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π"):
                        status.markdown("**–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–∫—Ç–æ—Ä–æ–≤...**")
                        if not st.session_state.factor_names_done:
                            pipeline.run_stage(7)  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                            pipeline.run_stage(8)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
                            st.session_state.factor_names_done = True
                            progress_bar.progress(87)
                        else:
                            progress_bar.progress(87)

                        if 'factor_names' in pipeline.artifacts:
                            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ —Ñ–∞–∫—Ç–æ—Ä–∞–º")
                            st.dataframe(pipeline.artifacts['factor_names'])

                            # –í—ã–±–æ—Ä —Ñ–∞–∫—Ç–æ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                            if '–§–∞–∫—Ç–æ—Ä' in pipeline.artifacts['factor_names'].columns:
                                selected_factor = st.selectbox(
                                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—Ç–æ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
                                    pipeline.artifacts['factor_names']['–§–∞–∫—Ç–æ—Ä'].tolist()
                                )
                                if '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ' in pipeline.artifacts['factor_names'].columns:
                                    factor_vars = pipeline.artifacts['factor_names'][
                                        pipeline.artifacts['factor_names']['–§–∞–∫—Ç–æ—Ä'] == selected_factor
                                        ]['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'].values[0]
                                    st.write(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–∞–∫—Ç–æ—Ä–µ {selected_factor}: {factor_vars}")
                                else:
                                    st.warning("–°—Ç–æ–ª–±–µ—Ü '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö.")
                            else:
                                st.warning("–°—Ç–æ–ª–±–µ—Ü '–§–∞–∫—Ç–æ—Ä' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö.")
                        else:
                            st.error("–î–∞–Ω–Ω—ã–µ –æ —Ñ–∞–∫—Ç–æ—Ä–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞–ø –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")

                # –§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø (—Å–∫—Ä—ã—Ç, –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
                if st.session_state.get("show_final_stage", False):
                    with st.expander("üì• –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
                        progress_bar.progress(100)
                        st.success("–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.download_button(
                                label="–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç Excel",
                                data=open("–û—Ç—á–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã/soil_analysis_results.xlsx", "rb").read(),
                                file_name="soil_analysis_report.xlsx"
                            )
                        st.subheader("–§–∞–∫—Ç–æ—Ä–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏")
                        st.dataframe(pipeline.artifacts['factor_analysis']['loadings'])
                        st.subheader("–§–∞–∫—Ç–æ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏")
                        st.dataframe(pipeline.artifacts['factor_scores'])
                        fig = plt.figure(figsize=(12, 6))
                        pipeline.artifacts['factor_scores'].plot(kind='bar')
                        plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫")
                        st.pyplot(fig)

            except Exception as e:
                st.error(f"üö® –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
                st.exception(e)
            finally:
                progress_bar.empty()

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if temp_path is not None and temp_path.exists():
            temp_path.unlink(missing_ok=True)

    elif page == "–ê–Ω–∞–ª–∏–∑ –ø–æ—á–≤—ã":
        st.title("üå± –ê–Ω–∞–ª–∏–∑ –ø–æ—á–≤—ã –ø–æ —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–º –Ω–∞–≥—Ä—É–∑–∫–∞–º")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        if 'top_factors' not in st.session_state:
            st.session_state.top_factors = None
        if 'recommendations' not in st.session_state:
            st.session_state.recommendations = None

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –í–ù–ï –±–ª–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        factor_loadings, factor_scores, factor_names = load_factor_data()
        variable_descriptions = load_variable_descriptions()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–æ–∫
        @st.cache_data
        def load_encoding_mapping():
            encoding_mapping = {}
            try:
                with open("–û—Ç—á–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã/encoding_mapping.txt", "r", encoding="utf-8") as file:
                    current_column = None
                    for line in file:
                        if line.startswith("–°—Ç–æ–ª–±–µ—Ü:"):
                            current_column = line.split(":")[1].strip()
                            encoding_mapping[current_column] = {}
                        elif "‚Üí" in line:
                            key, value = line.split("‚Üí")
                            key = key.strip().strip("'")
                            value = int(value.strip())
                            encoding_mapping[current_column][key] = value
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–æ–∫: {str(e)}")
            return encoding_mapping

        encoding_mapping = load_encoding_mapping()

        # –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if factor_loadings is not None and factor_scores is not None:
            st.write("üîç –í–≤–µ–¥–∏—Ç–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—á–≤—ã:")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            variable_descriptions['–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è'] = variable_descriptions['–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è'].astype(str).str.strip()
            factor_loadings.index = factor_loadings.index.astype(str).str.strip()
            index_name = factor_loadings.index.name or 'index'
            factor_data = factor_loadings.reset_index().rename(columns={index_name: 'variable'})

            factor_data = factor_data.merge(
                variable_descriptions,
                left_on='variable',
                right_on='–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è',
                how='left'
            ).drop(columns=["–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è"]).fillna("–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")

            if 'variable' not in factor_data.columns:
                st.error("–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
                st.stop()

            # üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            loaded_data = load_user_input()

            # üìù **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö**
            user_input = {}
            for _, row in factor_data.iterrows():
                var_name = row['variable']
                desc = row["–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"]
                label = f"{var_name} - {desc}"

                if var_name in encoding_mapping:
                    options = list(encoding_mapping[var_name].keys())

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    default_value = next(
                        (k for k, v in encoding_mapping[var_name].items() if v == loaded_data.get(var_name, 0)),
                        options[0]
                    )

                    selected = st.selectbox(label, options, key=f"select_{var_name}",
                                            index=options.index(default_value))
                    user_input[var_name] = encoding_mapping[var_name][selected]

                else:
                    user_input[var_name] = st.number_input(label, value=loaded_data.get(var_name, 0.0),
                                                           key=f"num_{var_name}")

            # üéõÔ∏è –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–ø–µ—Ä—å user_input —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
            col1, col2 = st.columns(2)

            with col1:
                if st.button("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
                    loaded_data = load_user_input()
                    if loaded_data:
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                    else:
                        st.warning("‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.")

            with col2:
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ"):
                    save_user_input(user_input)
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

            # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
            col1, col2 = st.columns([1, 2])
            with col1:
                if st.button("üîé –ù–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã"):
                    input_vector = np.array([user_input[var] for var in factor_data["variable"]])
                    factor_similarity = factor_loadings.T.dot(input_vector)

                    if isinstance(factor_similarity, pd.DataFrame):
                        factor_similarity = factor_similarity.squeeze()

                    st.session_state.top_factors = factor_similarity.abs().sort_values(ascending=False).head(3)
                    st.session_state.recommendations = None

            with col2:
                if st.session_state.top_factors is not None:
                    if st.button("üìú –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
                        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                            try:
                                recommendations_df = pd.DataFrame({
                                    "–ù–∞–∑–≤–∞–Ω–∏–µ_—Ñ–∞–∫—Ç–æ—Ä–∞": [factor_names.get(f, f) for f in
                                                         st.session_state.top_factors.index],
                                    "–í–ª–∏—è–Ω–∏–µ": st.session_state.top_factors.values.round(2),
                                    "–§–∞–∫—Ç–æ—Ä": st.session_state.top_factors.index
                                })

                                generator = RecommendationGenerator()
                                result_df = generator.process(recommendations_df)
                                st.session_state.recommendations = result_df

                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤—Å–µ–≥–¥–∞ –ø–æ–¥ –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞)
            if st.session_state.top_factors is not None:
                st.subheader("üìå –ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
                for factor, score in st.session_state.top_factors.items():
                    display_name = factor_names.get(factor, factor)
                    st.write(f"**{display_name}**: –≤–ª–∏—è–Ω–∏–µ {score:.2f}")

                fig, ax = plt.subplots(figsize=(8, 4))
                sns.barplot(x=st.session_state.top_factors.values,
                            y=st.session_state.top_factors.index,
                            ax=ax,
                            palette="viridis")
                ax.set(xlabel="–í–ª–∏—è–Ω–∏–µ", ylabel="–§–∞–∫—Ç–æ—Ä", title="–¢–æ–ø —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤–ª–∏—è–Ω–∏—è")
                st.pyplot(fig)

            if st.session_state.recommendations is not None:
                st.subheader("üöú –ê–≥—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                full_text = "\n\n".join(
                    f"### {row['–ù–∞–∑–≤–∞–Ω–∏–µ_—Ñ–∞–∫—Ç–æ—Ä–∞']} (–≤–ª–∏—è–Ω–∏–µ: {row['–í–ª–∏—è–Ω–∏–µ']})\n{row['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏']}"
                    for _, row in st.session_state.recommendations.iterrows()
                )
                st.markdown(full_text)

        else:
            st.warning("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑")


if __name__ == "__main__":
    main()
